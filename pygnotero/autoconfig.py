import os
import os.path

class autoconfig:

	"""
	This class provides easy storage and retrieval of
	settings.
	"""

	def __init__(self, config_file):
	
		"""
		Read the default settings and override them
		by settings from the config file
		"""
		
		self.config_file = config_file	
		self.is_first_run = True

		if os.name == "nt":
			self.home_folder = os.environ["USERPROFILE"].decode('iso8859-15')
			self.os = "windows"
		elif os.name == "posix":
			self.home_folder = os.environ["HOME"].decode('iso8859-15')
			self.os = "*nix"
		else:
			print "autoconfig.__init__(): You appear to be running an unsupported OS"					
		
		self.load_default_settings()			
		
		for sp in self.search_path():
		
			path = os.path.join(sp, config_file)
			if os.path.exists(path):
				self.load_config(path)
				self.is_first_run = False
		
		if self.is_first_run:		
			self.first_run()
			
		
	def default_settings(self):
	
		"""
		Contains a dictionary of default settings. These are
		stored as self.xxx class variables
		"""
	
		return {}	
	
	def settings_comment(self, var):
		
		"""
		Offers the possibility of commenting settings
		"""
		
		return None	
		
	def search_path(self):
	
		"""
		Returns a list of paths which are searched for the
		config file
		"""
		
		l = []
		
		if os.name != "nt":
			l.append("/etc")
		l.append(self.home_folder)
		return l
	
	def load_default_settings(self):
	
		"""
		Read the default settings and store them in the class
		"""
	
		for var, val in self.default_settings().items():		
		
			if type(val) == float:
				cmd = "self.%s = %f" % (var, val)			
			elif type(val) == int:
				cmd = "self.%s = %d" % (var, val)			
			elif type(val) == str:
				cmd = "self.%s = '%s'" % (var, val)
			else:
				print "autoconfig.load_default_settings(): variable '%s' has an invalid type (%s)" % (var, type(val))
				return
					
			exec(cmd) 
		
	def load_config(self, path):
	
		"""
		Read settings from the config file
		"""
		
		f = open(path, "r")
		for l in f:
			if l[0] != "#":
				a = l.split("=")
				if len(a) == 2:
					var = a[0].strip()
					val = a[1].strip().replace("\\", "\\\\")
					val = unicode(val, errors="replace")
					
					if var in self.default_settings():
					
						try:
							float(val)
							cmd = "self.%s = %s" % (var, val)
						except:
							cmd = "self.%s = u'%s'" % (var, val)
						exec(cmd)
												
					else:
						print "autconfig.load_config(): unrecognized setting '%s' in config file" % var
						
		f.close()
		
	def save_config(self):
	
		"""
		Save the config to a file
		"""
		
		f = open(os.path.join(self.home_folder, self.config_file), "w")
		f.write("# Automatically generated by autoconfig\n")
		for var in self.default_settings():		
			val = eval("self.%s" % var)
			cmd = "%s = %s" % (var, val)			
			if var in self.settings_comments():
				f.write("\n# " + self.settings_comments()[var] + "\n")
			f.write(cmd + "\n")
		f.close()
			
		

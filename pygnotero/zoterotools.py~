"""
This file is part of Gnotero.

Gnotero is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Gnotero is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Gnotero.  If not, see <http://www.gnu.org/licenses/>.
"""

import sqlite3
import os
import shutil

datafile = None

storage_path = None

last_update = None

attachment_query = """
	select items.itemID, itemAttachments.path, itemAttachments.itemID
	from items, itemAttachments
	where items.itemID = itemAttachments.sourceItemID
	"""

date_query = """
	select items.itemID, fields.fieldName, itemDataValues.value
	from items, itemData, fields, itemDataValues
	where
		items.itemID = itemData.itemID
		and itemData.fieldID = fields.fieldID
		and itemData.valueID = itemDataValues.valueID
		and (fields.fieldName = "date" or fields.fieldName = "publicationTitle" or fields.fieldName = "volume" or fields.fieldName = "issue" or fields.fieldName = "title")
	"""
	
author_query = """
	select items.itemID item_id, creatorData.lastName as item_author
	from items, itemCreators, creators, creatorData
	where
		items.itemID = itemCreators.itemID
		and itemCreators.creatorID = creators.creatorID
		and creators.creatorDataID = creatorData.creatorDataID
	order by itemCreators.orderIndex
	"""
	
def zotero_working():
	
	"""
	Checks whether everything is working as it should
	returns: True if good, False if bad
	"""
	
	try:
		search_zotero("dummy search")
	except:
		return False
		
	return True

def format_title(item, format = "full"):

	"""
	item: as returned by search_zotero()
	returns: a string which described the item	
	format: "full" or "simple"
	"""

	if "author" in item:
		author = item["author"]
	else:
		author = ["Unknown author", ]
	
	if "date" in item:
		year = item["date"]
	else:
		year = "XXXX"
		
	if len(author) > 5:
		author = author[0] + " et al."
	elif len(author) > 2:
		author = ", ".join(author[:-1]) + " & " + author[-1]
	elif len(author) == 2:
		author = " & ".join(author)
	else:
		author = author[0]
		
	title = "<b>%s (%s)</b>" % (author, year)
	
	if format == "simple":
		return title
	
	if "title" in item and format == "full":
		tmp = item["title"]
		if len(tmp) > 60:
			tmp = "%s..." % tmp[:57]
		title = "%s\n<small>%s</small>" % (title, tmp)
	
	if "publicationTitle" in item:
		pub_title = item["publicationTitle"]
		if len(pub_title) > 60:
			pub_title = "%s..." % pub_title[:57]
		title = "%s\n<small><i>%s</i></small>" % (title, pub_title)
	else:
		return title
	
	if "volume" in item:
		title = "%s <small><i>%s</i></small>" % (title, item["volume"])
		
	if "issue" in item:
		title = "%s<small>(%s)</small>" % (title, item["issue"])
						
	return title

conn = None

library = {}

def zotero_update():

	"""
	Makes a copy of the current Zotero database to work on
	and indexes the content.
	"""

	global library
	global conn

	print "Syncing with Zotero database"

	shutil.copyfile(datafile, ".gnotero.sql")
	conn = sqlite3.connect(".gnotero.sql")	
	c = conn.cursor()
	
	library = {}

	c.execute(date_query)

	for item in c.fetchall():
		item_id = item[0]
	
		item_name = item[1]
	
		if item_name == "date":
			item_value = item[2][-4:]
		else:
			item_value = item[2]
		
		if item_id not in library:
			library[item_id] = {}
		library[item_id][item_name] = item_value
	
	c.execute(author_query)

	for item in c.fetchall():
		item_id = item[0]
		item_author = item[1].capitalize()
		if item_id not in library:
			library[item_id] = {}
		if "author" not in library[item_id]:
			library[item_id]["author"] = []
		library[item_id]["author"].append(item_author)
	
	c.execute(attachment_query)

	for item in c.fetchall():
		item_id = item[0]
		if item[1] != None:
			item_attachment = item[1][8:]
			attachment_id = item[2]
					   
			if item_attachment[-4:] == ".pdf":
	
				if item_id not in library:
					library[item_id] = {}
		
				library[item_id]["file"] = item_attachment
				library[item_id]["attachment_id"] = attachment_id				
			
	c.close()
					
def search_zotero(criteria, format = "full"):

	"""
	Searches the Zotero database by author and year of publication
	returns: a list of items which match the search criteria
	"""

	global datafile
	global last_update

	stats = os.stat(datafile)
	
	if last_update == None or stats[8] > last_update:
		zotero_update()
		last_update = stats[8]		
		
	criteria = criteria.strip().split()
	  
	matches = []

	for item_id in library:
		if "author" in library[item_id] and "date" in library[item_id]:
		
			match_all = True
			for criterium in criteria:				

				match = False
				for author in library[item_id]["author"]:
					if author.lower().count(criterium.lower()) > 0:
						match = True
					
				if library[item_id]["date"].count(criterium) > 0:
					match = True
					
				if not match:
					match_all = False
					break
					
			if match_all:
				matches.append(item_id)			
	
	items = []
	
	c = conn.cursor()
				
	for item_id in matches:
	
		item = []
		item.append(format_title(library[item_id], format))
		
		if "file" in library[item_id]:
			c.execute("select items.key from items where itemID = %d" % library[item_id]["attachment_id"])
			key = c.fetchone()[0]
			item.append( storage_path % (key, library[item_id]["file"]) )
			
		item.append(library[item_id])		
		items.append(item)
		
	c.close()
	
	print "Searching for %s returned %d references" % (criteria, len(items))
		
	return items
					
			   

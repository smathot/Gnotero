"""
This file is part of Gnotero.

Gnotero is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Gnotero is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Gnotero.  If not, see <http://www.gnu.org/licenses/>.

CHANGELOG
	
28-01-2010
- Added a desktop entry
- Added .deb packages
- Made the dialogs a bit more pretty
- Changed evince to xdg-open, so that pdfs can be opened anywhere

"""

import os
import gtk
import subprocess
import gnote
from pygnotero import zoterotools

class Gnotero(gtk.StatusIcon):
	
	version = "0.21"

	def __init__(self):
		
		"""
		The constructor
		"""
		
		print
		print "Welcome to Gnotero %s!" % self.version
		print "Homepage: http://www.cs.vu.nl/~cogsci/cogpsy/smathot/gnotero.html"
		print
		print "Gnotero is free software, released under the GNU General Public License v3"
		print "http://www.gnu.org/licenses/gpl.html"
		print
		print "Settings are stored in ~/.gnotero"
		print
	
		gtk.StatusIcon.__init__(self)
		
		menu = """
			<ui>
			 <menubar name="Menubar">
			  <menu action="Menu">
			   <menuitem action="Locate"/>		if not hasattr(self, "max_results"):
			self.max_results = 10
			
		if not hasattr(self, "lower_border_width"):			
			self.lower_border_width = 4
		
		if not hasattr(self, "format"):
			self.format = "full"		
			
		if not hasattr(self, "notes"):		
			self.notes = "disabled"
			   <menuitem action="About"/>
			   <menuitem action="Quit"/>			   
			  </menu>
			 </menubar>
			</ui>
		"""
		
		actions = [
			('Menu',  None, 'Menu'),
			('Quit', gtk.STOCK_QUIT, None, None, 'Quit', self.quit),
			('Locate', gtk.STOCK_OPEN, None, None, 'Locate Zotero folder', self.preferences),
			('About', gtk.STOCK_ABOUT, None, None, 'About', self.about)
			]
						
		self.first_result = None
		self.set_preferences()		

		ag = gtk.ActionGroup('Actions')
		ag.add_actions(actions)
		self.manager = gtk.UIManager()
		self.manager.insert_action_group(ag, 0)
		self.manager.add_ui_from_string(menu)
		self.menu = self.manager.get_widget('/Menubar/Menu/Quit').props.parent

		quit = self.manager.get_widget('/Menubar/Menu/Quit')
		quit.get_children()[0].set_markup('Quit')		
		
		preferences = self.manager.get_widget('/Menubar/Menu/Locate')
		preferences.get_children()[0].set_markup('Locate Zotero folder')

		self.icon_theme = gtk.icon_theme_get_default()
		pixbuf = self.icon_theme.load_icon("gnotero", 16, 0)

		self.set_from_pixbuf(pixbuf)
		self.set_tooltip('Quick access to your Zotero references')
		self.set_visible(True)							
							
		self.connect('popup-menu', self.on_popup_menu)
		self.connect('activate', self.on_activate)		
		self.shown = False
		
		if not zoterotools.zotero_working():
			mb = gtk.MessageDialog(buttons=gtk.BUTTONS_OK)
			mb.set_title("Something went wrong!")
			mb.set_markup("<b>Failed to connect to Zotero</b>\n\nAre you running an outdated version of Zotero?")
			mb.run()
			mb.destroy()
			quit()		
		
		self.create_window()
				
	def set_preferences(self, zotero_folder = None):
		
		"""
		Loads the preferences from the .gnotero file
		in the home directory. If this file doesn't exist
		the user is asked to locate the Zotero data folder.
		"""
	
		first = True				
		while not os.path.exists(os.environ["HOME"] + "/.gnotero"):
		
			if first:
				mb = gtk.MessageDialog(buttons=gtk.BUTTONS_OK)		
				mb.set_title("Welcome!")						
				mb.set_markup("<b>Welcome!</b>\n\nThis appears to be the first time that you have started Gnotero.\nBefore you start you have to tell Gnotero where to find the Zotero data folder. You can find this folder in the Advanced section of your Zotero preferences.")
				mb.run()
				mb.destroy()		
				first = False
	
			self.preferences()

		f = open(os.environ["HOME"] + "/.gnotero", "r")
		
		for l in f:
			a = l.strip().split("=")
		
			if len(a) == 2:
				try:
					exec("self.%s = %d" % (a[0], int(a[1])))
				except:
					exec("self.%s = '%s'" % (a[0], a[1]))
					
		if not hasattr(self, "max_results"):
			self.max_results = 10
			
		if not hasattr(self, "lower_border_width"):			
			self.lower_border_width = 4
		
		if not hasattr(self, "format"):
			self.format = "full"		
			
		if not hasattr(self, "notes"):		
			self.notes = "disabled"

		
		zoterotools.datafile = self.zotero_folder + "/zotero.sqlite"		
		zoterotools.storage_path = self.zotero_folder + "/storage/%s/%s"
		
		f.close()
		
	def save_preferences(self):
		
		"""
		Writes the preferences to the .gnotero file
		in the home directory
		"""
		
		if not hasattr(self, "max_results"):
			self.max_results = 10
			
		if not hasattr(self, "lower_border_width"):			
			self.lower_border_width = 4
		
		if not hasattr(self, "format"):
			self.format = "full"		
			
		if not hasattr(self, "notes"):		
			self.notes = "disabled"		
		
		f = open(os.environ["HOME"] + "/.gnotero", "w")		
		f.write("zotero_folder=%s\n" % self.zotero_folder)
		f.write("max_results=%d\n" % self.max_results)
		f.write("lower_border_width=%d\n" % self.lower_border_width)
		f.write("format=%s\n" % self.format)
		f.write("notes=%s\n" % self.notes)
		f.close()				
		
	def quit(self, event):
		
		"""
		Quits the program
		"""
		
		quit()		
		
	def preferences(self, event = None):
		
		"""
		Presents a simple preference dialog.
		Currently, this is simply a locate dialog for the Zotero folfer.
		"""
		
		fd = gtk.FileChooserDialog("Locate Zotero Folder", None, gtk.FILE_CHOOSER_ACTION_SELECT_FOLDER, (gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL, gtk.STOCK_OPEN, gtk.RESPONSE_OK))
		if fd.run() == gtk.RESPONSE_OK:
			self.zotero_folder = fd.get_filename()
			
			if os.path.exists(self.zotero_folder + "/zotero.sqlite"):			
				self.save_preferences()
			else:
				fd.destroy()
				mb = gtk.MessageDialog(buttons=gtk.BUTTONS_OK)
				mb.set_title("Incorrect folder")
				mb.set_markup("<b>Please select the Zotero Data folder</b>\n\nYou can find this folder in the Advanced section of your Zotero preferences.")
				mb.run()
				mb.destroy()
				self.preferences()
				return			
		
		fd.destroy()
	
	def about(self, event):
		
		"""
		Displays a simple About dialog
		"""
		
		mb = gtk.MessageDialog(buttons=gtk.BUTTONS_OK)
		mb.set_title("About Gnotero")
		mb.set_markup("<b>Gnotero %s</b>\n\nQuick access to your Zotero references\n\nSebastiaan Mathot (2009-2010)\n<span size='small'>http://www.cs.vu.nl/~cogsci/cogpsy/smathot/gnotero.html</span>" % self.version)
		mb.run()
		mb.destroy()
				
	def create_window(self):
		
		"""
		Creates an empty results window
		"""
	
		self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
		self.window.realize()
		
		screen, area, orientation = self.get_geometry()
		self.window.move(area[0], area[1])
		self.window.set_decorated(False)
		self.window.set_keep_above(True)
		self.window.set_skip_taskbar_hint(True)
								
		self.style = self.window.get_style()
							
		self.search_edit = gtk.Entry()
		self.search_edit.connect("activate", self.search)
				
		self.search_box = gtk.HBox()
		self.search_box.pack_start(self.search_edit, True, True)		
		self.search_box.set_border_width(16)
		
		self.search_event_box = gtk.EventBox()
		self.search_event_box.add(self.search_box)	
		self.search_event_box.modify_bg(gtk.STATE_NORMAL, self.style.bg[gtk.STATE_SELECTED])
		
						
		self.results_box = gtk.VBox()
		self.results_box.set_homogeneous(False)
		self.results_box.set_border_width(4)
		self.results_box.set_spacing(4)				
				
		self.border_box = gtk.HBox()
		self.border_box.set_border_width(self.lower_border_width)
		
		self.border_event_box = gtk.EventBox()
		self.border_event_box.add(self.border_box)	
		self.border_event_box.modify_bg(gtk.STATE_NORMAL, self.style.bg[gtk.STATE_SELECTED])
		
		self.main_box = gtk.VBox()
		self.main_box.pack_start(self.search_event_box)
		self.main_box.pack_start(self.results_box)
		self.main_box.pack_start(self.border_event_box)
		
		self.window.add(self.main_box)				
		
		self.window.connect("focus-out-event", self.on_focus_out)
		self.window.set_size_request(325, -1)		
		
		self.search()		
				
	def nice_box(self, icon, msg):
		
		"""
		Creates a nice box for a result
		"""
	
		result = gtk.Label()
		result.set_markup(msg)
		result.set_line_wrap(True)
			
		result_box = gtk.HBox()
		result_box.pack_start(result, False, False)
		result_box.set_border_width(4)
		result_box.set_homogeneous(False)
		
		event_box = gtk.EventBox()
		event_box.add(result_box)
						
		return event_box
		
	def no_results(self):
		
		"""
		Notify if no results have been presented
		"""
		
		self.results_box.pack_start(self.nice_box("gnome-info", "<b>No results</b>"))
				
	def open_pdf(self, widget = None, event = None):
		
		"""
		Open a pdf using xdg-open
		"""		
		
		if event.button == 3:
		
			self.open_note(widget)
				
		else:
				
			if widget.pdf != None:
				os.system("xdg-open \"%s\" > /dev/null &" % widget.pdf.encode("latin-1"))
			
	def next_results(self, widget = None, event = None):
		
		"""
		Skip to the next page of the search results
		"""
		
		self.first_result += self.max_results
		self.search()
		
	def previous_results(self, widget = None, event = None):
		
		"""
		Skip to the previous page of the search results
		"""
		
		self.first_result -= self.max_results
		self.search()
		
	def open_note(self, widget = None, event = None):
		
		"""
		Opens a note in Gnote
		"""
		
		subprocess.call(widget.note_results[0]["cmd"].split())
		
	def retrieve_note(self, widget):
		
		"""
		Retrieves note information for a widget
		"""
		
		if widget.note_retrieved or self.notes == "disabled":
			return
		
		first_author = widget.data["author"][0]
		try:
			year = int(widget.data["date"][-4:])
		except:
			return

		if year != None:
			results = gnote.search_gnote((first_author, year))
			
			if len(results) > 0:
				
				im = gtk.Image()
				im.set_from_icon_name("gnote", gtk.ICON_SIZE_BUTTON)
				try:
					im.set_tooltip_markup(results[0]["preview"])
				except:
					im.set_tooltip_text(results[0]["preview"])
				widget.im = im

				widget.note_retrieved = True								
				widget.note_results = results
								
			else:
				widget.set_tooltip_text("No note attached")		
				
	def highlight(self, widget = None, event = None):
				
		"""
		Highlight a result, but only if a pdf is attached
		"""	
		
		self.retrieve_note(widget)
		
		if widget.im != None:
			widget.box.pack_end(widget.im, False, False)	
			widget.im.show_all()
		
		if widget.pdf != None:
			widget.modify_bg(gtk.STATE_NORMAL, self.style.bg[gtk.STATE_SELECTED])
			widget.label.modify_fg(gtk.STATE_NORMAL, self.style.fg[gtk.STATE_SELECTED])
	
	def unhighlight(self, widget = None, event = None):
		
		"""
		Unhighlight a result
		"""
				
		if widget.pdf != None:
			widget.modify_bg(gtk.STATE_NORMAL, self.style.bg[gtk.STATE_NORMAL])
			widget.label.modify_fg(gtk.STATE_NORMAL, self.style.fg[gtk.STATE_NORMAL])

		if widget.im != None:
			widget.box.remove(widget.im)
					
	def search(self, widget = None, event = None):
		
		"""
		Search Zotero and display the results
		"""
		
		self.results_box.foreach(lambda widget:self.results_box.remove(widget))
		self.window.resize(300, 50)

		search_term = self.search_edit.get_text()
						
		if search_term.strip() == "":

			self.results_box.pack_start(self.nice_box("gnome-info", "<b>No search term specificed</b>\nYou can search by author and year of publication"))			
		
		else:
			items = zoterotools.search_zotero(search_term, self.format)
			
			if len(items) == 0:
				self.first_result = None
				self.results_box.pack_start(self.nice_box("gnome-info", "<b>No results for</b> <i>%s</i>" % search_term))						
			elif len(items) > self.max_results:
			
				if self.first_result == None:
					self.first_result = 0
					
				self.button_box = gtk.HBox()
						
				self.button_box.pack_start(self.nice_box("gnome-info", "<b>Too many results for</b> <i>%s</i>\nDisplaying %d to %d of %d" % (search_term, self.first_result + 1, min(len(items), self.first_result + self.max_results), len(items))))			
				
				if self.first_result + self.max_results < len(items):
					image = gtk.Image()
					image.set_from_icon_name("next", gtk.ICON_SIZE_BUTTON)
					button = gtk.Button()
					button.add(image)
					button.connect("clicked", self.next_results)					
					self.button_box.pack_end(button, False, False, 4)	
									
				if self.first_result > 0:
					image = gtk.Image()
					image.set_from_icon_name("previous", gtk.ICON_SIZE_BUTTON)
					button = gtk.Button()
					button.add(image)
					button.connect("clicked", self.previous_results)					
					self.button_box.pack_end(button, False, False)
					
				self.results_box.pack_start(self.button_box)
				
				items = items[self.first_result:self.first_result + self.max_results]
				
			else:
				self.first_result = None
				self.results_box.pack_start(self.nice_box("gnome-info", "<b>%s results for</b> <i>%s</i>" % (len(items), search_term)))							
			
			for item in items:
						
				title = item[0].replace("&", "&amp;")				
				
				result = gtk.Label()
				result.set_markup(title)
				result.set_line_wrap(True)
				
				if len(item) > 2:
					result.set_markup("<span size ='small' color='%s'weight='bold'>[PDF]</span> %s" % ("#cc0000", title))
					pdf = item[1]
				else:										
					pdf = None
																					
				result_box = gtk.HBox()				
				result_box.pack_start(result, False, False)
				result_box.set_border_width(4)
			
				event_box = gtk.EventBox()								
				event_box.add(result_box)
				event_box.label = result
				event_box.pdf = pdf	
				event_box.box = result_box
				event_box.data = item[-1]
				event_box.note_retrieved = False
				event_box.im = None
												
				event_box.connect("button-press-event", self.open_pdf)
				event_box.connect("enter-notify-event", self.highlight)
				event_box.connect("leave-notify-event", self.unhighlight)																
												
				self.results_box.pack_start(event_box)
				
		self.results_box.show_all()
		
	def on_popup_menu(self, status, button, time):
		
		"""
		Wrapper function
		"""
					
		self.menu.popup(None, None, None, button, time)

		
	def on_activate(self, status):
		
		"""
		Show the window
		"""
	
		if not self.shown:	
			screen, area, orientation = self.get_geometry()
			self.window.move(area[0], area[1])
			self.window.show_all()
			self.shown = True
		else:
			self.window.hide()
			self.shown = False
			
	def on_focus_out(self, widget, event):
		
		"""
		Hide the window
		"""
		
		if self.shown:
			self.window.hide()
			self.shown = False
		

